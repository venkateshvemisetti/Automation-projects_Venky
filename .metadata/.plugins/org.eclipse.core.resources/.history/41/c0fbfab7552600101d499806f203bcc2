import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.MessageConsumer;
import javax.jms.Queue;
import javax.jms.Session;

import com.solacesystems.jms.SolConnectionFactory;
import com.solacesystems.jms.SolJmsUtility;
import com.solacesystems.jms.property.JMSConnectionFactoryPropertyBean;

public class PushSolace {

    public static void main(String[] args) {
        String solaceHost = "your_solace_host:port";
        String solaceVPN = "default";
        String solaceUser = "admin";
        String solacePassword = "admin";
        String queueName = "RJIO_SOLACE_V";

        Connection connection = null;
        try {
            // Create a connection factory using SolJmsUtility
            
            
            ConnectionFactory connectionFactory = new JMSConnectionFactoryPropertyBean(solaceUsername, solacePassword, solaceHost);
            Connection connection = connectionFactory.createConnection(

          

            // Establish connection
        
            connection.start();

            // Create a session
            Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);

            // Create the queue
            Queue queue = session.createQueue(queueName);

            // Create a message consumer
            MessageConsumer messageConsumer = session.createConsumer(queue);
            
            // Set a message listener (optional, for asynchronous message handling)
            messageConsumer.setMessageListener(message -> {
                try {
                    System.out.println("Received message: ");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });

            System.out.println("Connected and listening for messages on queue: " + queueName);

            // Keep the consumer running (e.g., using a loop or waiting for a signal)
            Thread.sleep(Long.MAX_VALUE);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            if (connection != null) {
                try {
                    connection.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
}