package com.rjio.pages;

import java.util.List;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.aventstack.extentreports.MediaEntityBuilder;
import com.fasterxml.jackson.databind.JsonNode;
import com.rjio.accelator.ActionWrappers;
import com.rjio.objects.AlertsSourcesObject;

public class AlertsSourcesPage extends ActionWrappers {
	public void alertSourceLink() {
		try {
			if (findElementts(AlertsSourcesObject.alertSourcLink).size() > 0) {
				if (findElementt(AlertsSourcesObject.alertSourcLink).isDisplayed()) {
					click(AlertsSourcesObject.alertSourcLink, "alertsourclink");
				} else {
					System.err.println("alertSourcLink is not displayed");
				}
			} else {
				System.err.println("alertSourcLink size is not matched");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void alertAccept() {
		try {
			System.err.println("alert()::::::");
			List<WebElement> alerts = findElementts(AlertsSourcesObject.alertSourceOK);
			System.out.println("size:: " + alerts.size());
			if (alerts.size() > 0) {
				System.err.println("size----");
				if (!alerts.get(0).isDisplayed()) {
					sendKeys(AlertsSourcesObject.parameter, "parameter", "data1");
					
					return;

				} else {

					JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
					jsExecutor.executeScript("arguments[0].click();", alerts.get(0));
					System.out.println("alerttttttt");
					click(AlertsSourcesObject.parameter, "parameter");
					alertAccept();
				}

			} else {

				sendKeys(AlertsSourcesObject.parameter, "parameter", "data1");

			}

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void createSource(JsonNode node) {
		try {
			sleep(3000);
			moveFrame("bodyframe");
			Select sources = new Select(findElementt(AlertsSourcesObject.addSourceDD));
			sources.selectByVisibleText("Custom");
			sleep(4000);
			String name_csv = node.get("name").asText();
			String description_csv = node.get("description").asText();
			sendKeys(AlertsSourcesObject.name, "name", name_csv);
			sendKeys(AlertsSourcesObject.description, "description", description_csv);
			click(AlertsSourcesObject.addParametersBTN, "addParametersBTN");
			sleep(20000);
			extentTest.info("The source data is,",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.saveBTN, "saveBTN");
			extentTest.info("The source data is saved,",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			sleep(3000);
			click(AlertsSourcesObject.alertSourceOK, "alertSourceOK");
			sleep(6000);
			backToFrame();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void searchSource(String name) {
		try {
			sendKeys(AlertsSourcesObject.searchfiled, "searchfiled", name);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void editSource(JsonNode node) {
		try {
			sleep(3000);
			moveFrame("bodyframe");
			String queueName = node.get("name").asText();
			searchSource(queueName);
			sleep(6000);
			extentTest.info("The source is ", MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.editIcon, "editIcon");
			sleep(1000);
			String description_csv = node.get("description").asText();
			extentTest.info("The source of edit is ",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			sendKeys(AlertsSourcesObject.description, "description", description_csv);
			sleep(1000);
			if (node.get("Edit").asText().equalsIgnoreCase("yes")) {
				click(AlertsSourcesObject.updateBTN, "updateBTN");
			} else {
				System.err.println("cancel required here--");
			}

			sleep(2000);
			extentTest.info("The source data is saved",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.alertSourceOK, "alertSourceOK");
			sleep(1000);
			backToFrame();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void startSource(JsonNode node) {
		try {
			sleep(4000);
			moveFrame("bodyframe");
			String sourceName = node.get("name").asText();
			searchSource(sourceName);
			sleep(10000);
			extentTest.info("The before Source starting",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.startIcon, "startIcon");
			sleep(2000);
			extentTest.pass("The source confirmation is ",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.yesBTN, "yesBTN");
			sleep(1500);
			

			//click(AlertsSourcesObject.alertSourceOK, "alertSourceOK");
			sleep(5000);
			searchSource(sourceName);
			sleep(6000);
			extentTest.pass("The post source starting",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			backToFrame();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void stopSource(JsonNode node) {
		try {
			sleep(4000);
			moveFrame("bodyframe");
			String sourceName = node.get("name").asText();
			searchSource(sourceName);
			sleep(6000);
			extentTest.info("The before Source stopping",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.stopIcon, "stopIcon");
			sleep(2000);
			extentTest.pass("The source confirmation is ",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.yesBTN, "yesBTN");
			sleep(1500);
			//click(AlertsSourcesObject.alertSourceOK, "alertSourceOK");
			sleep(5000);
			searchSource(sourceName);
			sleep(6000);
			extentTest.pass("The post source stopping",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			backToFrame();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void deleteSource(JsonNode node) {
		try {

			sleep(3000);
			moveFrame("bodyframe");
			String queueName = node.get("name").asText();
			searchSource(queueName);
			sleep(6000);
			extentTest.info("The before deleting source is",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.deleteIcon, "deleteIcon");
			sleep(1000);
			extentTest.info("The delection confirmation is,",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			click(AlertsSourcesObject.yesBTN, "yesBTN");
			sleep(2000);
			searchSource(queueName);
			sleep(5000);
			extentTest.pass("The post deleting source is",
					MediaEntityBuilder.createScreenCaptureFromPath(takeScreenShot()).build());
			sleep(1000);
			clear(AlertsSourcesObject.searchfiled, "searchfiled");
			backToFrame();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
